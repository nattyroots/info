variable types:
var = redefine, reassign, function scoped
let = reassign, can't redefine, function scoped, block level scoped
const = cannot reassign , can't redefine, function scope, block level scoped

arrow functions: 
 always anonymous
 this keyword no longer bound with arrow functions, like: es5 function has its own this that he bounds,
it means that anonymous function in object will get the this of the object and not of the function,
this issue was workarounded with "that" variable before arrow functions
arguments object no longer bound with arrow functions (console.log(arguments) will not print all arguments as in es5)

.this keyword will not work in some component class method:(this problen is not only for React components or es6)
class Action extends React.component {
    handle(){
        console.log(this.somedata or some method)//this this will not work here
    }

    render(){
        return(<div>{this.somedata or some method})//this this will work here
    }
}
the issue is because of context,
the context loosing is then using code like "const name = obj.someFunction" (not calling with () just getting the variable that contains the function)
while doing this the context not transfered, like if you run obj.someFunction() the function will run in context of the obj, but if you do some like
"const name = obj.someFunction" the context of the object not trnasfered to "name" and "name" is just an function!! and regular funciton has an "undifined" by default for "this" keyword
function does not have this, we can use bind() to fix the issue
it could be fixed by constructor use in React components, and it is much better, because the binding is performed only once

.props vs state - 
both are just objects
both can be used when rendering
changes to both rerenders 
props - comes from above
state - defined on the component its self
props cant be changed by component 
state can be changed by the component its self

.e.preventDefault - is best to live in the component class, not in the general component ...
.state:
    setup default state object
    component rendered with default state values
    state chnages based on some event automatically

attributes in JSX:
    class is className because class is keyword to create class, there is a list of availible attributes in web

event handler:

.plugins to install : babel ES6 ES7

.node_modules are different from os to os, so be sure to generate them on machine you work on

.npm install -g : is for global, to run the installed as command 

.we want react to render our application 

.React is all about components, we can create React Component for reusing same code, we will have a wrapper Component for app that contains all other components

.React, ReactDom could be loaded via script tag... it's just a javascript files..

.React uses virtual DOM to be efficient in rendering and rendering, it does not really renders all the page all the time (the flash elements in chrome elements is the one who changes)
so we can do the changes without worrying about making the application slow 

.ES6 Classes - 
    with uppercase name, methods can be overided, can inherit from other class, has consturctor

to compile the JSX to javascript you can run the command (after installing babel and the presets)
babel src/app.js --out-file=public/scripts/app.js --presets=env,react (--watch)

.stateless functional components, its a presentational components
cant use state in them, can use props, witch is gotten as first parameter of the function,
functional components are faster
cant use lifecycle functions
  
.React sees lower case element name, its thinks about html tag, if uppercase element name provided, React searches for React component with that name

.JSX
    answer:
    javascript xml, provided by react 

. JSX is not understood by the browser, it should be translated to normal javascript,
    bable does just this... babel is compiler, it translates JSX, ES7, ES6 to old ES5

. to work with JSX I will install babel locally

ReactDom.render is the function that renders the react components:
it gets the component to render and the root element, there it will be rendered

JSX expressions :
    javascript in JSX, use {javascript} (javascript in curly brackets)

.look for React events in google, for example, if I use form then it will refresh all the page, 
so I will use "e.preventDefault();" so the page will not be refreshed...

.props 
    allows us to pass some data to the component, it lets us to make the component reusible 
.there is a difference between referensing function and calling function

.calling function on event = > e.target.elements = get us all elements on the target (who called us), the elements are indexed by 'name'
.when class and when function based component?
   answer: class based components are state full, functional are stateless components, class based components allow to access lifecycle methods of react, function based components does not

.what is connect and mapStateToProps?
   answer:

.uppercase, lower case (react/node js), what are the rules?
   answer: if we export single function or some little code snippet
   when we will use lowercase for export, 
   if we export class (component/model) it will be exported capital case 
   in React, the React differentiates between html and React components with the case, so react components should be named with uppercase

.what is so different in middleware?
   answer: middleware, inspects the incoming request, and can change it if it's needed,
   after this change the request is sent to the routes...

.default export / named export??
    answer: could be only one default export
    it could be imported like: import a from "aa"
    named imports could be imported like : import {a} from "aa"
    default export does need to be imported by name(naming is not important)
    in named, the name is important
    if file has one big main thing to export, it can be a default, and if the file is exporting many little functions they can be the named exports

.describe components of Redux
   answer:

.describe life cycle:
   answer: it exists only at class based components:
   constructor()
   componentWillMount()
   render()
   componentDidMount()
   componentWillUnmound()

.liveserver:
    simple server

.Webpack general idea –
Allows us to organize our JavaScript, so at the end of the day we get one js file (bundle) that contains everything that is needed  for our application to run, this means one script tag instead of many , which can slow down the web application (one request for one script file before the application runs)
Webpack braking up all files in our application to islands and the file islands communicating between them with es6 import export syntax, and this means that we can break down the application to multiple files
It makes the application more scalable
Allows us to install third party dependencies from npm and yarn
Makes the life easy to manage the dependencies
Before Webpack:
The client side did not do so much work as today, most of the work were performed in server side
We have a public folder that contains everything the app needed (all the JS files, our JS and third-party JS)
                                                               i.      For all this to run we should add script tags to load them , in correct order, because we rely on global namespace
                                                             ii.      Its enoing to manage it
                                                           iii.      We polluting the global namespace because we are adding stuff we not really need there
After :
We have 3 folders:
                                                               i.      Public/ - for serving assets
                                                             ii.      Src/ -  client side javascript
                                                           iii.      Node_modules / -  third-party modules
Now the dependencies are not global but in app.js
After running the webpack we will get one file in public (bundle.js)
It loads with script tag in index.html
Webpack will run bable for us
Good scalability , many little files
 
Global modules – bad idea –
Global modules are not listed in dependency list (package.json), so how should I know their are needed?
When installing something globally this means that all projects will use the "something" in the same version, and while working on many projects it is not realistic
all dependencies should be defined via package.json file
whole command will be needed to be typed in terminal to use/ run global tools, so if the app should run at other computer it is needed to run the whole command with correct path
 
to uninstall global modules:
npm uninstall -g babel-cli live-server
now install them not globally
npm install live-server babel-cli
now it is not possible to run the commands from terminal
instead of running them on terminal we will need set them up as scripts in package.json
 
"scripts":{
  	"serve" : "live-server public/",
  	"build": "babel src/app.js  --out-file=public/scripts/app.js –presets=env,react –watch"
}
