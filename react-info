npx Create React App Generation
In the next lecture Stephen will be going over how to install Create React App globally and generate the application. As of npm@5.2.0 we can now avoid this global install and instead use npx to generate the app on the fly to get the most current libraries and avoid many dependency conflicts.

Instead of this:
npm install -g create-react-app
create-react-app client

Just do this:
npx create-react-app client


Official docs on CRA usage with npx are available here:
https://create-react-app.dev/docs/getting-started#quick-start



-------------
npm install --save redux react-redux react-router-dom

creating the APP:
1. will have 2 root files:
    index.js - initial bootup logic for react and Redux = data layer control(Redux)
    App.js - rendering layer control  - React layr, React router

naming:
name with capital (i.e App.js): if giving file exporting Class or React component
name with lowercase (i.e index.js) if giving file returns just a function or functions

-------------
in front end we can use "import" statement because we use "webpack and buble"
witch gives us acess to es2015 modules

on backend we use nodejs witch has acess to nodejs that uses "require" syntacs

Provider is the "glue" between React and Redux so they can work nicely
because the Provider is at the very root every component can acess the store 

in Reac/Redux there is a convention to call to file index.js so it will automatically 
be imported(?)

BrowserRouter -   brains of react router, it changes the  set of components according to url
Route - is react component sets the rule between sertain route and set of components that is visible on the page

webpack - module loader, packs all project files and creates only several files (one or more)

------------------

component to redux store:
1.import connect helper from react-redux
2.define mapStateToProps function 
3.now we can pull the state we need in the component
---------------------